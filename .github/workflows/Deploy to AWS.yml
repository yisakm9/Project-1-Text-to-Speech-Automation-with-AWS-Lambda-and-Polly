name: Deploy to AWS

on:
  push:
    branches:
      - develop
      - staging
      - main

jobs:
  build-lambda:
    name: Build Lambda Artifact
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Create build directory
        run: |
          mkdir -p build
          pip install --target build -r lambda/requirements.txt
          cp lambda/lambda_function.py build/

      - name: Zip artifact
        run: |
          cd build
          zip -r ../lambda_function.zip .
          cd ..

      - name: Upload Lambda artifact
        uses: actions/upload-artifact@v4
        with:
          name: lambda-package
          path: lambda_function.zip

  deploy:
    name: Deploy to AWS
    needs: build-lambda
    runs-on: ubuntu-latest

    # Use GitHub Environments for protection rules (e.g., required approvers)
    environment:
      name: ${{ (github.ref_name == 'main' && 'production') || (github.ref_name == 'staging' && 'staging') || 'development' }}
      url: ${{ steps.get_api_url.outputs.url }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_KEY }}
          aws-region: us-east-1

      - name: Download Lambda artifact
        uses: actions/download-artifact@v4
        with:
          name: lambda-package

      # --- THIS IS THE CORRECTED STEP ---
      - name: Move Lambda artifact for Terraform
        run: mv lambda_function.zip ./terraform/

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3

      - name: Set environment variable for tfvars
        run: |
          if [[ "${{ github.ref_name }}" == "main" ]]; then
            echo "TF_VARS_FILE=prod.tfvars" >> $GITHUB_ENV
          elif [[ "${{ github.ref_name }}" == "staging" ]]; then
            echo "TF_VARS_FILE=staging.tfvars" >> $GITHUB_ENV
          else
            echo "TF_VARS_FILE=dev.tfvars" >> $GITHUB_ENV
          fi

      - name: Terraform Init
        run: terraform init
        working-directory: ./terraform

      - name: Terraform Plan
        run: terraform plan -var-file=${{ env.TF_VARS_FILE }} -out=tfplan
        working-directory: ./terraform

      - name: Terraform Apply
        run: terraform apply -auto-approve tfplan
        working-directory: ./terraform

      - name: Get API Gateway URL output
        id: get_api_url
        run: echo "url=$(terraform output -raw api_endpoint)" >> $GITHUB_OUTPUT
        working-directory: ./terraform